<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="imageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="imageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAADG
        BwAAAk1TRnQBSQFMAgEBBQEAAQwBAAEEAQABEAEAARABAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEYBgABGP8A/wBdAAFKAZoBvAHJAd4B5gP+twABDQGJAbgBBQGKAbkBSQGfAcMB4QHt
        AfK0AAELAY8BvwEZAcMB5wEAAYkBvQECAYIBtQFyAbYB1AHxAfUB964AAQsBkQHBAR0B7gH/AQQBjQG/
        AQABiQG9AQABhQG4AQcBgQGzAZoByAHcAfoC+6gAAQsBlwHDAQAB6wH/ASoBzwHlAQABpQHMAQABngHI
        AQABlgHBAQABiwG6ARkBiQG2AcEB2gHlpQABCwGaAcgBAAHtAf8BKgHnAf0BAAHVAf8BAAHaAf8BBwHi
        Af8BCgHJAe8BFwGTAb4BvAHYAeSlAAELAZ8BzgEfAfcB/wEEAcEB9QEAAcYB+gEAAb4B8gEFAZgBywGT
        AcUB3AH4AvqoAAELAaUB0gEZAeEB+wEAAboB7gECAaQB2AFrAbwB2wHvAfQB964AAQ4BpQHSAQUBrQHd
        AUIBrwHVAd4B7gHztAABQgGvAdIBxgHiAesD/v8A/wD/AP8A/wA8AAG7AXYBSgHmAdUByQP+JwABSgGd
        AUoByQHdAckD/icAA3kD1AP+JwABSgFUAcgByQHLAegD/icAAbwBXQERAccBYwEJAcYBfAFJAfIB6AHh
        JAABEwGMARcBCAGKAQkBSQGcAUkB4QHsAeEkAAN0A3kDgQPmJAABFQEoAcUBCQEkAdIBSQFSAccB4QHi
        AfIkAAHFAWYBDwHzAaUBOQHTAWwBAAHBAVwBAgHWAZ4BcgH3AfQB8R4AARIBkQEZATUBxAFOAQABigEA
        AQIBgQECAXIBswFyAfEB9QHxHgADfAO+A4IDawOZA/IeAAEWASoBygFHAXYB+wEAASAB4gECARcBxAFy
        AXgB1AHxAfIB9x4AAc0BbgEPAf8BxgFmAdkBdAEBAdUBbgEAAcwBZQEAAbwBWwEHAd0BtgGaAfsC+hgA
        AREBkQEVAVoB7gGOAQABjwIAAY0CAAGGAQABBwF9AQcBmgHGAZoB+gH7AfoYAAOAA+kDiAOGA3sDYQOz
        A/kYAAETASkBzAGBAbEB/wEAAScB6gEAASMB5QEAAR0B1QEHARYBvAGaAZ4B3AL6AfsYAAHVAXUBEgH/
        AcABVAHwAbEBYgHgAYQBHAHbAX0BFwHVAXUBEAHIAWcBCgG6AWABGwHmAdABwRUAARIBlAEVAVAB6wGJ
        ATsBzgFYAQ4BoAEYAQsBmgEUAQgBlAEOAQUBiAEIARoBhQEcAcEB2gHBFQADhAPrA8ADlQOOA4YDdANm
        A8wVAAEUAS0B0AF5AaoB/wFSAYAB+AEPATgB7AEPATMB5gEKAS4B4AEHASEBzgEbASgBuwHBAcMB5hUA
        AdkBeQEVAf8BxgFpAfsBugFbAfoBnAETAf4BngEQAf8BogEJAfABjgEIAcYBaAEYAeQBzAG8FQABEQGW
        ARYBVQHvAY4BQAHXAWMBHQG2ATkBIAG7AUEBJgHCAUwBHAGvAToBGgGPAR8BvAHXAbwVAAOKA+8DzAOz
        A7gDwQOqA3IDyBUAARUBLwHUAYEBsgH/AVkBigH/AScBVwH/ATMBZAH/AUABcgH/ATUBXAHvAR4BLwHG
        AbwBvgHlFQAB3wGBARUB/wHWAZAB8gGKAQAB9QGPAQAB8gGLAQAB1gFyAQUB4gG3AZMB+wH5AfgYAAES
        AZkBFgFoAfkBmgEPAagBHwEVAa8BLQEVAawBLgELAY0BEAGTAcUBkwH4AfoB+BgAA5ED8wOmA7EDqgN9
        A7MD+BgAARYBMgHZAZIBwwH/AQcBOgH/ARUBSAH/ARoBRwH3AQ0BJgHRAZMBmAHeAvgB+xgAAeMBiQEc
        AfgBtAFXAewBhQEAAeQBfwECAeYBqQFrAfcB8wHvHgABFgGfARsBRwHVAWcBDgGmAR4BCQGXARIBawG3
        AWsB7wH0Ae8eAAOZA9IDpgONA6cD8R4AARsBPAHeAVQBhgH/AQABLwH8AQYBKQHgAWsBdgHgAu8B9x4A
        AeMBiAEbAegBhgEKAeUBmgFCAfUB6gHeJAABFgGgARoBDwGgARYBQgGnAUIB3gHsAd4kAAOcA5sDnQPp
        JAABGwE7AeIBCgEzAe0BQgFXAdsB3gHgAfQkAAHgAZcBQgHvAdwBxgP+JwABQgGsAUIBxgHhAcYD/icA
        A6AD3AP+JwABQgFbAeMBxgHMAe4D/v8A/wBgAAFCAU0BPgcAAT4DAAEoAwABQAMAASADAAEBAQABAQYA
        AQEWAAP/AQAC/wYAAv8GAAL/BgAB4wH/BgAB4QH/BgAB4AF/BgAB4AEfBgAB4AEPBgAB4AEPBgAB4AEf
        BgAB4AF/BgAB4QH/BgAB4wH/BgAC/wYAAv8GAAL/BgAY/wHjAf8B4wH/AeMB/wHjAf8B4QH/AeEB/wHh
        Af8B4QH/AeABfwHgAX8B4AF/AeABfwHgAR8B4AEfAeABHwHgAR8B4AEPAeABDwHgAQ8B4AEPAeABDwHg
        AQ8B4AEPAeABDwHgAR8B4AEfAeABHwHgAR8B4AF/AeABfwHgAX8B4AF/AeEB/wHhAf8B4QH/AeEB/wHj
        Af8B4wH/AeMB/wHjGf8L
</value>
  </data>
</root>