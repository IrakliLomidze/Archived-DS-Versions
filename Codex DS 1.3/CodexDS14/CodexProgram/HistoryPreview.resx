<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="ultraPictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>